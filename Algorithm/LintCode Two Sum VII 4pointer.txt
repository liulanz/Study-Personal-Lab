public class Solution {
    /**
     * @param nums: the input array
     * @param target: the target number
     * @return: return the target pair
     */
    public List<List<Integer>> twoSumVII(int[] nums, int target) {
        // write your code here
        List<List<Integer>>res=new ArrayList<>();
        int negleft=0;int negright=nums.length-1;
        int posleft=0;int posright=nums.length-1;
        while(negleft<nums.length&&nums[negleft]>=0)negleft++;
        while(negright>=0&&nums[negright]>=0)negright--;
        while(posleft<nums.length&&nums[posleft]<0)posleft++;
        while(posright>=0&&nums[posright]<0)posright--;
        if(negleft==nums.length)return twopointerP(nums,target);
        if(posleft==nums.length)return twopointerN(nums,target);
       
        
        while(negright>=0&&posright>=0){
            if(nums[negright]+nums[posright]==target){
                List<Integer>list=new ArrayList<>();
                list.add(negright);list.add(posright);
                Collections.sort(list);
                res.add(list);
                posright--;
                while(posright>=0&&nums[posright]<0)posright--;
            }
            else if(nums[negright]+nums[posright]>target){
                posright--;
                while(posright>=0&&nums[posright]<0)posright--;
            }else{
                negright--;
                while(negright>=0&&nums[negright]>=0)negright--;
            }
        }
        while(negleft<negright){
             if(nums[negleft]+nums[negright]==target){
                List<Integer>list=new ArrayList<>();
                list.add(negleft);list.add(negright);
                res.add(list);
                negleft++;
                while(negleft<nums.length&&nums[negleft]>=0)negleft++;
            }else if(nums[negleft]+nums[negright]>target){
                negleft++;
                while(negleft<nums.length&&nums[negleft]>=0)negleft++;
            }
            else{
                negright--;
                while(negright>=0&&nums[negright]>=0)negright--;
            }
        }
        while(posleft<posright){
            if(nums[posleft]+nums[posright]==target){
                List<Integer>list=new ArrayList<>();
                list.add(posleft);list.add(posright);
                res.add(list);
                posright--;
                while(posright>=0&&nums[posright]<0)posright--;
            }else if(nums[posleft]+nums[posright]>target){
                posright--;
                while(posright>=0&&nums[posright]<0)posright--;
            }
            else{
                posleft++;
                while(posleft<nums.length&&nums[posleft]<0)posleft++;
            }
        }
        
        
        return res;
    }
    
    
    public List<List<Integer>> twopointerN(int[] nums, int target){
        List<List<Integer>>res=new ArrayList<>();
        int left=0;int right=nums.length-1;
        while(left<right){
            if(nums[left]+nums[right]==target){
                List<Integer>list=new ArrayList<>();
                list.add(left);list.add(right);
                res.add(list);
                left++;
            }else if(nums[left]+nums[right]>target){
                left++;
            }
            else{
                right--;
            }
        }
        return res;
    }
    
    public List<List<Integer>> twopointerP(int[] nums, int target){
        List<List<Integer>>res=new ArrayList<>();
        int left=0;int right=nums.length-1;
        while(left<right){
            if(nums[left]+nums[right]==target){
                List<Integer>list=new ArrayList<>();
                list.add(left);list.add(right);
                res.add(list);
                right--;
            }else if(nums[left]+nums[right]>target){
                right--;
            }
            else{
                left++;
            }
        }
        return res;
    }
}