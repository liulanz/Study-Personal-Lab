public class Solution {
    /**
     * @param n: the number of buckets
     * @param k: the maximum times of operations
     * @param A: the number of balls in each bucket
     * @param W: the maximum capacity of each bucket
     * @return: return the minimum square value of the maximum difference
     */
    public int getAns(int n, int k, List<Integer> A, List<Integer> W) {
        // write your code here
        int max=-1;
        for(int i=1;i<A.size();i++){
            int diff=Math.abs(A.get(i)-A.get(i-1));
            max=Math.max(max,diff);
        }
        int res=max;
        int l=0;int r=max;
        //System.out.println((check(W,A,0,k)));
        while(l<=r){
            int mid=l+(r-l)/2;
            if(check(W,A,mid,k)){
                res=mid;
                r=mid-1;
            }else{
                l=mid+1;
            }
        }
        //System.out.println((check(W,A,1,k)));
        return res*res;
    }
    
    public boolean check(List<Integer> W,List<Integer>list,int T,int k){
        int A[]=new int[list.size()];
        for(int i=0;i<A.length;i++)A[i]=list.get(i);
        
        for(int i=0;i<A.length;i++){
            for(int x=0;x<A.length;x++)A[x]=list.get(x);
            int cnt=0;
            int pivot=A[i];
            for(int j=i+1;j<A.length;j++){//decrease
                int diff=A[j]-A[j-1];
                if(Math.abs(diff)<=T)continue;
                if(diff>=0){//decrease
                    cnt+=(A[j]-(A[j-1]+T));
                    A[j]=A[j-1]+T;   
                }else{//increase
                    int target=A[j-1]-T;
                    if(target>W.get(j)){
                        cnt=k+1;
                        break;
                    }
                    cnt+=(A[j-1]-T-A[j]);
                    A[j]=target;
                }
                
            }
            for(int j=i-1;j>=0;j--){//increasing
                int diff=A[j]-A[j+1];
                if(Math.abs(diff)<=T)continue;
                 if(diff>=0){//decrease
                    cnt+=(A[j]-(A[j+1]+T));
                    A[j]=A[j+1]+T;   
                }else{//increase
                    int target=A[j+1]-T;
                    if(target>W.get(j)){
                        cnt=k+1;
                        break;
                    }
                    cnt+=(A[j+1]-T-A[j]);
                    A[j]=target;
                }
            }
            //System.out.println(i+"  "+pivot+"  "+cnt);
            if(cnt<=k)return true;
        }
        return false;
    }
}