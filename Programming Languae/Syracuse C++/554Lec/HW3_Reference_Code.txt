//HW3
#include <iostream>
#include <list>
#include <vector>
#include <map>
#include <string>
using namespace std;

class course {
public:
	string name;
	int section;
	int credits;
	course() {}
	course(string n, int s, int c) { name = n; section = s; credits = c; }
	bool operator==(course c) { return (name == c.name); }
};
void add_student(map<int, map<int, list<course *> * > *> &DB, int id);
void remove_student(map<int, map<int, list<course *> * > *> &DB, int id);
void add_course(map<int, map<int, list<course *> * > *> &DB, int semester, int id, course c); //20171 Spring semester of 2017; 20172: Fall semester of 2017
																							   //All courses in the list should be sorted according to name (increasing order)
void drop_course(map<int, map<int, list<course *> * >*> &DB, int semester, int id, course c);



void print_student_semester_courses(map<int, map<int, list<course *> * >*> &DB, int semester, int id);
void print_student_all_courses(map<int, map<int, list<course *> * > *> &DB, int id);
void print_DB(map<int, map<int, list<course *> * > *> &DB);

ostream & operator<< (ostream &str, const course &c) {
	str << c.name << " " << c.section << " " << c.credits << " ";
	return str;
}

ostream & operator<< (ostream &str, const list<course *> &L) {
	for (course *i : L) { str << *i << " "; }
	str << endl;
	return str;
}

ostream & operator<<(ostream &str, const map<int, list<course *> *> M) {
	for (auto i : M) {
		str <<"semester = "<< i.first << endl;
		str << *(i.second);
	}
	return str;
}

ostream & operator<<(ostream &str, const map<int, map<int, list<course *> *> *> &M1) {
	for (auto i : M1) {
		str << "student id = " << i.first << endl;;
		str << *(i.second) << " ";
	}
	str << endl;
	return str;
}


int main() {
	map<int, map<int, list<course *> *> *> DB;
	add_student(DB, 11111);
	course C1("CIS554", 1, 3), C2("CSE674", 1, 3), C3("MAT296", 8, 4), C4("WRT205", 5, 3);

	add_course(DB, 20171, 11111, C1);
	add_course(DB, 20171, 11111, C4);
	add_course(DB, 20171, 11111, C3);
	add_course(DB, 20171, 11111, C2);
	print_student_semester_courses(DB, 20171, 11111);

	drop_course(DB, 20171, 11111, C1);
	print_student_semester_courses(DB, 20171, 11111);

	add_course(DB, 20172, 11111, C2);
	add_course(DB, 20172, 11111, C4);
	add_course(DB, 20172, 11111, C3);
	add_course(DB, 20172, 11111, C1);
	print_student_all_courses(DB, 11111);

	add_student(DB, 11112);
	add_course(DB, 20171, 11112, C2);
	add_course(DB, 20171, 11112, C4);
	add_course(DB, 20171, 11112, C3);
	add_course(DB, 20171, 11112, C1);
	print_student_semester_courses(DB, 20171, 11112);

	add_course(DB, 20172, 11112, C2);
	add_course(DB, 20172, 11112, C4);
	add_course(DB, 20172, 11112, C3);
	add_course(DB, 20172, 11112, C1);
	print_student_semester_courses(DB, 20172, 11112);

	print_student_all_courses(DB, 11112);

	print_DB(DB);
	remove_student(DB, 11111);
	print_DB(DB);

	getchar();
	getchar();
	return 0;
}

void add_student(map<int, map<int, list<course *> * > *> &DB, int id) {
	if (DB.find(id) != DB.end()) return;
	DB[id] = new map<int, list<course *> *>;

}

void remove_student(map<int, map<int, list<course *> * > *> &DB, int id) {
	if (DB.size() == 0) return;
	if (DB.find(id) == DB.end()) return;
	if (DB[id]->size() == 0) { 
		delete DB[id];
		DB.erase(id); return; }
	auto it1 = DB[id]->begin();
	while (it1 != DB[id]->end()) {
		auto it2 = it1->second->begin();
		while (it2 != it1->second->end()) {
			delete *it2;
			it2++;
		}
		delete(it1->second);
		it1++;
	}
	delete DB[id];
	DB.erase(id);
}


void add_course(map<int, map<int, list<course *> * > *> &DB, int semester, int id, course c) {

	if (DB.find(id) == DB.end()) return;

	if (DB[id]->size() == 0 || DB[id]->find(semester) == DB[id]->end()) {
		(*(DB[id]))[semester] = new list <course *>;
		(*(DB[id]))[semester]->push_back(new course(c));
		return;
	}

	else {
		auto it1 = (*(DB[id]))[semester]->begin();
		while (it1 != (*(DB[id]))[semester]->end()) {
			if (**it1 == c) return;
			it1++;
		}
		(*(DB[id]))[semester]->push_back(new course(c));
	}
}

void drop_course(map<int, map<int, list<course *> * > *> &DB, int semester, int id, course c) {

	if (DB.find(id) == DB.end()) return;
	if (DB[id]->size() == 0) return;
	if (DB[id]->find(semester) == DB[id]->end()) return;
	auto it1 = (*DB[id])[semester]->begin();
	while (it1 != (*DB[id])[semester]->end()) {
		if (**it1 == c) {
			delete *it1;
			(*DB[id])[semester]->erase(it1);
			return;
		}
		it1++;
	}

}

void print_student_semester_courses(map<int, map<int, list<course *> * > *> &DB, int semester, int id) {

	if (DB.find(id) == DB.end()) return;
	cout << "student id = " << id <<  endl;
	if (DB[id]->size() == 0) return;
	cout << "semester = " << semester << endl;
	cout << *((*(DB[id]))[semester]);
	cout << endl;

}
void print_student_all_courses(map<int, map<int, list<course *> * > *> &DB, int id) {
	if (DB.find(id) == DB.end()) return;
	cout << "student id = " <<id<< endl;
	cout << *(DB[id]);
	cout << endl;
}

void print_DB(map<int, map<int, list<course *> * > *> &DB) {
	cout << DB;
}


/*
//Sample Screenshot


student id = 11111
semester = 20171
CIS554 1 3  WRT205 5 3  MAT296 8 4  CSE674 1 3

student id = 11111
semester = 20171
WRT205 5 3  MAT296 8 4  CSE674 1 3

student id = 11111
semester = 20171
WRT205 5 3  MAT296 8 4  CSE674 1 3
semester = 20172
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3

student id = 11112
semester = 20171
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3

student id = 11112
semester = 20172
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3

student id = 11112
semester = 20171
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3
semester = 20172
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3

student id = 11111
semester = 20171
WRT205 5 3  MAT296 8 4  CSE674 1 3
semester = 20172
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3
student id = 11112
semester = 20171
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3
semester = 20172
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3

student id = 11112
semester = 20171
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3
semester = 20172
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3


*/
