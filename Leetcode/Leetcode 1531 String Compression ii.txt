class Solution {
    List<int[]>list=new ArrayList<>();
    int post[];
    Map<String,Integer>map=new HashMap<>();
    public int getLengthOfOptimalCompression(String s, int k) {
        int cnt=1;
        int cur=s.charAt(0)-'a';
        for(int i=1;i<s.length();i++){
            if(s.charAt(i)==s.charAt(i-1)){
                cnt++;
            }else{
                list.add(new int[]{cur,cnt});
                cnt=1;
                cur=s.charAt(i)-'a';
            }
        }
        list.add(new int[]{cur,cnt});
        post=new int[list.size()];
        
    
        int sum=0;
        for(int i=list.size()-1;i>=0;i--){
            sum+=len(list.get(i)[1]);
            post[i]=sum;
        }
        
       
        return dfs(0,k,26,0);
    }
    
    public int dfs(int index,int k,int pre,int precnt){
        if(index>=list.size()){
            return len(precnt);
        }
        if(k==0){
            
            int sum=0;
            if(pre==list.get(index)[0]){
                return len(list.get(index)[1]+precnt)+get(post,index+1);
            }else{
                return len(precnt)+post[index];
            }
           
        }
        
        String state=index+","+k+","+((char)(pre+'a'))+","+precnt;
        if(map.containsKey(state))return map.get(state);
         
        Integer res=Integer.MAX_VALUE;
        
        int pair[]=list.get(index);
        
        int name=pair[0],cnt=pair[1];   
        
        if(pre==name){//same character as pre
            cnt+=precnt;
            //few possible cases, example: currently have len3, we can make it to len2, len1 and ect
            if(check(cnt-99)){
                if(k>=(cnt-99)){
                    res=Math.min(res,dfs(index+1,k-(cnt-99),name,99));
                }
            }
            if(check(cnt-9)){
                if(k>=(cnt-9)){
                    res=Math.min(res,dfs(index+1,k-(cnt-9),name,9));
                }
            }
            if(check(cnt-0)){//delete all
                if(k>=(cnt-0)){
                    res=Math.min(res,dfs(index+1,k-(cnt-0),26,0));
                }
            }
            res=Math.min(res,dfs(index+1,k,name,cnt));//not delete anything
            
        }
        else{
            int add=len(precnt);
            
            if(check(cnt-99)){
                if(k>=(cnt-99)){
                    res=Math.min(res,add+dfs(index+1,k-(cnt-99),name,99));
                }
            }
            if(check(cnt-9)){
                if(k>=(cnt-9)){
                    res=Math.min(res,add+dfs(index+1,k-(cnt-9),name,9));
                }
            }
            if(check(cnt-0)){//delete all
                if(k>=(cnt-0)){
                    res=Math.min(res,dfs(index+1,k-(cnt-0),pre,precnt));
                }
            }
            res=Math.min(res,add+dfs(index+1,k,name,cnt));//not delete anything
        }
    
        //System.out.println(state+"  "+res);
        map.put(state,res);
        return res;   
    }
    
    public boolean check(int i){
        if(i<=0)return false;
        return true;
    }
    
    public int get(int A[],int i){
        if(i>=A.length)return 0;
        return A[i];
    }
    
    public int len(int n){
        if(n==0)return 0;
        if(n==100)return 4;
        if(n==1)return 1;
        if(n>1&&n<10)return 2;
        return 3;
    }
}