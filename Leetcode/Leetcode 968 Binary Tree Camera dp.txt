/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<String,Integer>map=new HashMap<>();
    public int minCameraCover(TreeNode root) {
        if(root.left==null&&root.right==null)return 1;
        int res1=dfs(root,1,0,0);
        int res2=dfs(root,1,1,1);
        return Math.min(res1,res2);
    }
    
    public int dfs(TreeNode root,int id,int camera,int cover){//[0:no 1:yes]
        String state=id+","+camera+","+cover;
        if(map.containsKey(state))return map.get(state);
        int res=0;
        if(camera==1){
            res++;
            if(root.left!=null)res+=Math.min(dfs(root.left,id*2,0,1),dfs(root.left,id*2,1,1));
            if(root.right!=null)res+=Math.min(dfs(root.right,id*2+1,0,1),dfs(root.right,id*2+1,1,1));
        }else{
            if(cover==1){
                if(root.left!=null){
                  res+=Math.min(dfs(root.left,id*2,1,1),dfs(root.left,id*2,0,0));  
                }
                if(root.right!=null){
                  res+=Math.min(dfs(root.right,id*2+1,1,1),dfs(root.right,id*2+1,0,0));  
                }
            }else{
                if(root.left==null&&root.right==null)return 1;
                else if(root.left!=null&&root.right!=null){
                    int M=Integer.MAX_VALUE;
                    M=Math.min(M,dfs(root.left,id*2,1,1)+dfs(root.right,id*2+1,0,0));
                    M=Math.min(M,dfs(root.left,id*2,0,0)+dfs(root.right,id*2+1,1,1));
                    M=Math.min(M,dfs(root.left,id*2,1,1)+dfs(root.right,id*2+1,1,1));
                    res+=M;
                }
                else if(root.left!=null)res+=dfs(root.left,id*2,1,1);
                else if(root.right!=null)res+=dfs(root.right,id*2+1,1,1);
            }
        }
        map.put(state,res);
        return res;
    }
}
