class Solution {
    int dp[][][];//Mouse, Cat               0:mouse  1:cat
    public int catMouseGame(int[][] graph) {
        int len=graph.length;
        dp=new int[len][len][2];
        Queue<int[]>queue=new LinkedList<>();
        for(int i=0;i<len;i++){
            for(int who=0;who<2;who++){
                queue.add(new int[]{0,i,who});
                dp[0][i][who]=1;//Mouse win
                queue.add(new int[]{i,i,who});
                dp[i][i][who]=2;//Cat win
            }
        }
        while(queue.size()!=0){
            int tuple[]=queue.poll();
            int Mouse=tuple[0];
            int Cat=tuple[1];
            int turn=tuple[2];
            int status=dp[Mouse][Cat][turn];
            List<int[]>pre=find(graph,Mouse,Cat,turn);
            for(int preState[]:pre){
                int preM=preState[0];
                int preC=preState[1];
                int preT=preState[2];
                if(dp[preM][preC][preT]!=0)continue;
                 boolean flag1=false;
               
                if(preT==0){//pre mouse
                    for(int x:graph[preM]){
                        if(dp[x][preC][1]==1)flag1=true;
                    }
                    if(flag1){
                        dp[preM][preC][preT]=1;
                        queue.add(preState);
                        continue;
                    }
                }else{//pre cat
                    for(int x:graph[preC]){
                        if(x==0)continue;
                        if(dp[preM][x][0]==2)flag1=true;
                    }
                    if(flag1){
                        dp[preM][preC][preT]=2;
                        queue.add(preState);
                        continue;
                    }
                }
                //////
                boolean flag=true;
                if(preT==0){//pre mouse
                    for(int x:graph[preM]){
                        if(dp[x][preC][1]!=2)flag=false;
                    }
                    if(flag)dp[preM][preC][preT]=2;

                }else{//pre cat
                    for(int x:graph[preC]){
                        if(x==0)continue;
                        if(dp[preM][x][0]!=1)flag=false;
                    }
                    if(flag)dp[preM][preC][preT]=1;
                }
                if(flag)queue.add(preState);
                
            }
        }
        return dp[1][2][0];
    }
    public List<int[]> find(int graph[][],int M,int C,int currentT){
        List<int[]>res=new ArrayList<>();
        if(currentT==0){//Mouse, pre is cat
            int pre[]=graph[C];
            for(int i:pre){
                if(i!=0){//cat would not go 0
                    res.add(new int[]{M,i,1});
                }
            }
        }else{//Cat,pre is mouse
            int pre[]=graph[M];
            for(int i:pre){
                if(i!=0){//M do not go to cat
                    res.add(new int[]{i,C,0});
                }
            }
        }
        return res;
    }
}
