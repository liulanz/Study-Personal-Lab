由空地和墙组成的迷宫中有一个球。球可以向上（u）下（d）左（l）右（r）四个方向滚动，但在遇到墙壁前不会停止滚动。当球停下时，可以选择下一个方向。迷宫中还有一个洞，当球运动经过洞时，就会掉进洞里。

给定球的起始位置，目的地和迷宫，找出让球以最短距离掉进洞里的路径。 距离的定义是球从起始位置（不包括）到目的地（包括）经过的空地个数。通过'u', 'd', 'l' 和 'r'输出球的移动方向。 由于可能有多条最短路径， 请输出字典序最小的路径。如果球无法进入洞，输出"impossible"。

迷宫由一个0和1的二维数组表示。 1表示墙壁，0表示空地。你可以假定迷宫的边缘都是墙壁。起始位置和目的地的坐标通过行号和列号给出。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/the-maze-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



class Solution {
    int visit[][][];
    String visit1[][][];
    Queue<Node>q;
    int grid[][];
    public String findShortestWay(int[][] grid, int[] start, int[] end) {
        int min=Integer.MAX_VALUE;
        String res="";
        this.grid=grid;
        
        visit=new int[grid.length][grid[0].length][4];
        visit1=new String[grid.length][grid[0].length][4];


        for(int i=0;i<visit.length;i++){
            for(int j=0;j<visit[0].length;j++){
                Arrays.fill(visit[i][j],Integer.MAX_VALUE);
            }
        }
        
        visit[start[0]][start[1]][0]=0;
        visit[start[0]][start[1]][1]=0;
        visit[start[0]][start[1]][2]=0;
        visit[start[0]][start[1]][3]=0;
        
        q=new LinkedList<>();
        q.add(new Node(start[0],start[1],0,0,""));
        //q.add(new Node(start[0],start[1],1,0,""));
        //q.add(new Node(start[0],start[1],2,0,""));
        //q.add(new Node(start[0],start[1],3,0,""));
        while(q.size()!=0){
            Node node=q.poll();
            int r=node.r;
            int c=node.c;
            int dir=node.pos;
            int level=node.level;
            String last=node.s;

            if(level==0){
                add(r+1,c,0,level,last,'d');
                add(r-1,c,1,level,last,'u');
                add(r,c+1,2,level,last,'r');
                add(r,c-1,3,level,last,'l');
                continue;
            }

            //System.out.println(r+"  "+c+"  "+last+"   "+dir+"       "+level);
            
            if(r==end[0]&&c==end[1]){
                if(min>=level){
                    if(min==level){
                        if(res.compareTo(last)>1){
                            res=last;
                        }
                    }else{
                        min=level;
                        res=last;
                    }
                }
                continue;
            }//termination

            if(dir==0){
                if(stop(grid,r+1,c)){
                    //String newlast=last+"d";
                    add(r+1,c,0,level,last,'d');
                    add(r-1,c,1,level,last,'u');
                    add(r,c+1,2,level,last,'r');
                    add(r,c-1,3,level,last,'l');
                }else{
                    add(r+1,c,dir,level,last,' ');
                }
            }
            else if(dir==1){
                if(stop(grid,r-1,c)){
                   // String newlast=last+"u";
                    add(r+1,c,0,level,last,'d');
                    add(r-1,c,1,level,last,'u');
                    add(r,c+1,2,level,last,'r');
                    add(r,c-1,3,level,last,'l');
                }else{
                    add(r-1,c,dir,level,last,' ');
                }
            }
            else if(dir==2){
                if(stop(grid,r,c+1)){
                    //String newlast=last+"r";
                    add(r+1,c,0,level,last,'d');
                    add(r-1,c,1,level,last,'u');
                    add(r,c+1,2,level,last,'r');
                    add(r,c-1,3,level,last,'l');
                }else{
                    add(r,c+1,dir,level,last,' ');
                }
            }else{
                if(stop(grid,r,c-1)){
                    //String newlast=last+"l";
                    add(r+1,c,0,level,last,'d');
                    add(r-1,c,1,level,last,'u');
                    add(r,c+1,2,level,last,'r');
                    add(r,c-1,3,level,last,'l');
                }else{
                    add(r,c-1,dir,level,last,' ');
                }
            }
        }

        if(min==Integer.MAX_VALUE)return "impossible";
        return res;
    }

    public void add(int r,int c,int dir,int level,String last,char cc){
        if(r<0||r>=grid.length||c<0||c>=grid[0].length)return;
        if(grid[r][c]==1)return;
        if(level+1>visit[r][c][dir])return;
        if(level+1==visit[r][c][dir]){
            String newlast=last;
            if(cc!=' ')newlast+=cc;
            if(newlast.compareTo(visit1[r][c][dir])>1)return;
        }
        
        visit[r][c][dir]=level+1;
        //visit1[r][c][dir]=last;
        if(cc==' '){
           // System.out.println("yes1");
            visit1[r][c][dir]=last;
            q.add(new Node(r,c,dir,level+1,last));
        }
        else{
            visit1[r][c][dir]=last+cc;
           // System.out.println("yes2");
            q.add(new Node(r,c,dir,level+1,last+cc));
        }
    }

    public boolean stop(int grid[][],int r,int c){
        if(r<0||r>=grid.length||c<0||c>=grid[0].length)return true;
        if(grid[r][c]==1)return true;
        return false;
    }

    class Node{
        int r,c,level,pos;
        String s;
        public Node(int r,int c,int pos,int level,String s){
            this.r=r;this.c=c;this.level=level;this.pos=pos;
            this.s=s;
        }
    }
}

