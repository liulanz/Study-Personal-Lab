class Solution {
    ArrayList<Integer>adjecentlist[];
    List<List<Integer>>res=new ArrayList<>();
    int low[];
    int dis[];
    int time=1;
    boolean visit[];
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        adjecentlist=new ArrayList[n];
        low=new int[n];
        dis=new int[n];
        visit=new boolean[n];
        for(int i=0;i<n;i++)adjecentlist[i]=new ArrayList<>();
        for(List<Integer>edge:connections){
            int v1=edge.get(0);int v2=edge.get(1);
            adjecentlist[v1].add(v2);
            adjecentlist[v2].add(v1);
        }
        visit[0]=true;
        dfs(-1,0);
        return res;
    }
    public void dfs(int parent,int root){
        low[root]=time;
        dis[root]=time++;
        List<Integer>childs=adjecentlist[root];   
        for(int child:childs){
            if(!visit[child]){
                visit[child]=true;
                dfs(root,child);
                if(low[child]<=dis[root]){
                    low[root]=Math.min(low[root],low[child]);
                }else{//bridge
                    List<Integer>list=new ArrayList<>();
                    list.add(root);list.add(child);
                    res.add(list);
                }  
            }else{
                if(child!=parent){
                    low[root]=Math.min(low[child],low[root]); //met some ancestors
                }
            } 
        }
    }
}