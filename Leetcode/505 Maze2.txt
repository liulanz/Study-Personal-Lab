墙组成的迷宫中有一个球。球可以向上下左右四个方向滚动，但在遇到墙壁前不会停止滚动。当球停下时，可以选择下一个方向。

给定球的起始位置，目的地和迷宫，找出让球停在目的地的最短距离。距离的定义是球从起始位置（不包括）到目的地（包括）经过的空地个数。如果球无法停在目的地，返回 -1。

迷宫由一个0和1的二维数组表示。 1表示墙壁，0表示空地。你可以假定迷宫的边缘都是墙壁。起始位置和目的地的坐标通过行号和列号给出。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/the-maze-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
    int visit[][][];
    Queue<int[]>q;
    int grid[][];
    public int shortestDistance(int[][] grid, int[] start, int[] end) {
        int res=Integer.MAX_VALUE;

        this.grid=grid;
        visit=new int[grid.length][grid[0].length][4];

        for(int i=0;i<visit.length;i++){
            for(int j=0;j<visit[0].length;j++){
                Arrays.fill(visit[i][j],Integer.MAX_VALUE);
            }
        }
        
        visit[start[0]][start[1]][0]=0;
        visit[start[0]][start[1]][1]=0;
        visit[start[0]][start[1]][2]=0;
        visit[start[0]][start[1]][3]=0;
        
        q=new LinkedList<>();
        q.add(new int[]{start[0],start[1],0,0});
        q.add(new int[]{start[0],start[1],1,0});
        q.add(new int[]{start[0],start[1],2,0});
        q.add(new int[]{start[0],start[1],3,0});
        while(q.size()!=0){
            int A[]=q.poll();
            int r=A[0],c=A[1];
            int dir=A[2],level=A[3];
            if(dir==0){
                if(stop(grid,r+1,c)){
                    if(r==end[0]&&c==end[1]){
                        res=Math.min(res,level);
                        continue;
                    }
                    add(r+1,c,0,level);
                    add(r-1,c,1,level);
                    add(r,c+1,2,level);
                    add(r,c-1,3,level);
                }else{
                    add(r+1,c,dir,level);
                }
            }
            else if(dir==1){
                if(stop(grid,r-1,c)){
                    if(r==end[0]&&c==end[1]){
                        res=Math.min(res,level);
                        continue;
                    }
                    add(r+1,c,0,level);
                    add(r-1,c,1,level);
                    add(r,c+1,2,level);
                    add(r,c-1,3,level);
                }else{
                    add(r-1,c,dir,level);
                }
            }
            else if(dir==2){
                if(stop(grid,r,c+1)){
                    if(r==end[0]&&c==end[1]){
                        res=Math.min(res,level);
                        continue;
                    }
                    add(r+1,c,0,level);
                    add(r-1,c,1,level);
                    add(r,c+1,2,level);
                    add(r,c-1,3,level);
                }else{
                    add(r,c+1,dir,level);
                }
            }else{
                if(stop(grid,r,c-1)){
                    if(r==end[0]&&c==end[1]){
                        res=Math.min(res,level);
                        continue;
                    }
                    add(r+1,c,0,level);
                    add(r-1,c,1,level);
                    add(r,c+1,2,level);
                    add(r,c-1,3,level);
                }else{
                    add(r,c-1,dir,level);
                }
            }
        }

        if(res==Integer.MAX_VALUE)return -1;
        return res;
    }

    public void add(int r,int c,int dir,int level){
        if(r<0||r>=grid.length||c<0||c>=grid[0].length)return;
        if(grid[r][c]==1)return;
        if(level+1>visit[r][c][dir])return;
        visit[r][c][dir]=level+1;
        q.add(new int[]{r,c,dir,level+1});
    }

    public boolean stop(int grid[][],int r,int c){
        if(r<0||r>=grid.length||c<0||c>=grid[0].length)return true;
        if(grid[r][c]==1)return true;
        return false;
    }
}