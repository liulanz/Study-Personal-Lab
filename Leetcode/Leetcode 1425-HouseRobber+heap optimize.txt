class Solution {
    public int constrainedSubsetSum(int[] nums, int k) {
        if(nums.length==1)return nums[0];
        int dp[]=new int[nums.length];
        PriorityQueue<int[]>pq=new PriorityQueue<>((a1,a2)->{
            return a2[1]-a1[1];
        });
        int res=Integer.MIN_VALUE;
        pq.add(new int[]{0,nums[0]});
        for(int i=1;i<nums.length;i++){
            while(pq.size()!=0&&i-pq.peek()[0]>k){
                res=Math.max(res,pq.poll()[1]);
            }
            int cur[]=new int[]{i,nums[i]};
            if(pq.size()!=0){
                cur[1]+=Math.max(0,pq.peek()[1]);
                pq.add(cur);
            }
        }
        res=Math.max(res,pq.peek()[1]);
        return res;
    }
}